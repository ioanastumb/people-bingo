{"version":3,"sources":["logic/helpers.js","components/BingoCard.js","components/Emoji.js","components/Footer.js","logic/bingo-logic.js","components/BingoGame.js","components/App.js","index.js"],"names":["getRandomCardBackgroundColor","colors","Math","floor","random","length","useStyles","makeStyles","theme","title","fontSize","bingoInput","width","freeContent","paddingTop","BingoDefaultCard","index","question","onBlur","classes","id","Typography","className","color","gutterBottom","questionText","TextField","defaultValue","answer","event","target","value","BingoFreeCard","BingoComplexCard","string","answerId","reasonId","size","placeholder","style","charAt","toLowerCase","slice","BingoCard","questionType","Emoji","props","paddingRight","role","aria-label","label","aria-hidden","symbol","Footer","variant","align","Link","href","getQuestionsOrder","questions","shuffledQuestions","array","i","j","shuffleArray","map","shuffledQuestion","reason","isAnswered","checkForBingo","winType","gridSize","row","column","isBingo","generalLayout","marginLeft","spacing","marginRight","breakpoints","up","introLayout","gameLayout","heroContent","backgroundColor","palette","background","paper","padding","sidekickContent","bingoContent","position","bottom","left","margin","doubleBingoContent","resetButton","right","bold","fontWeight","marginTop","marginBottom","card","height","container","display","flexWrap","spaceBetweenItems","item","flex","boxSizing","footer","BingoGame","data","useState","setQuestions","bingoCounter","setBingoCounter","isDoubleBingo","setIsDoubleBingo","useEffect","JSON","parse","localStorage","getItem","React","setItem","stringify","handleOnBlur","type","updatedQuestions","isRowBingo","isColumnBingo","CssBaseline","Container","maxWidth","component","List","ListItem","ListItemText","disableTypography","primary","Paper","elevation","Card","CardContent","Button","onClick","handleReset","App","Helmet","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5df1cb7.chunk.js","sourcesContent":["const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nconst toLowercaseFirstLetter = string => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\nconst getRandomCardBackgroundColor = () => {\n    let colors = [\"#ffe289\", \"#ffd9bd\", \"#b197aa\", \"#8399c5\", \"#faba95\", \"#f9ebac\"];\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst getBingoColor = () => {\n    return \"#81c784\";\n}\n\nexport { shuffleArray, toLowercaseFirstLetter, getRandomCardBackgroundColor, getBingoColor };","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { toLowercaseFirstLetter } from '../logic/helpers';\nimport './BingoCard.css';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontSize: '1em',\n  },\n  bingoInput: {\n    width: '50%'\n  },\n  freeContent: {\n    fontSize: '2.5em',\n    paddingTop: 40\n  }\n}));\n\nconst BingoCard = ({ index, question, onBlur }) => {\n  return (\n    <div className=\"bingo-card\">\n      {\n        question.questionType === 'default' &&\n        <BingoDefaultCard\n          index={index}\n          question={question}\n          onBlur={onBlur} />\n      }\n      {\n        question.questionType === 'free' &&\n        <BingoFreeCard\n          question={question}\n        />\n      }\n      {\n        question.questionType === 'open-ended-question' &&\n        <BingoComplexCard\n          index={index}\n          question={question}\n          onBlur={onBlur} />\n      }\n    </div>\n  );\n}\n\nconst BingoDefaultCard = ({ index, question, onBlur }) => {\n  const classes = useStyles();\n  const id = \"answer-\" + index;\n\n  return (\n    <>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Find someone who...\n      </Typography>\n      <br />\n\n      <span>{question.questionText}</span>\n      <br />\n\n      <TextField id={id} defaultValue={question.answer} onBlur={event => onBlur(index, event.target.value, null, 'answer')} />\n    </>\n  )\n}\n\nconst BingoFreeCard = ({ question }) => {\n  const classes = useStyles();\n  return (\n    <Typography className={classes.freeContent} gutterBottom>\n      {question.questionText}\n    </Typography>\n  )\n}\n\nconst BingoComplexCard = ({ index, question, onBlur }) => {\n  const classes = useStyles();\n  const answerId = \"answer-\" + index;\n  const reasonId = \"reason-\" + index;\n\n  return (\n    <>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Question time!\n      </Typography>\n\n      <TextField id={answerId} size=\"small\" className={classes.bingoInput}\n        placeholder=\"who?\" defaultValue={question.answer} onBlur={event => onBlur(index, event.target.value, null, 'answer')} />\n      <span style={{ fontSize: 24 }}>,</span>\n      <br />\n\n      <span>{toLowercaseFirstLetter(question.questionText)}</span>\n      <br />\n\n      <TextField id={reasonId} defaultValue={question.answer} onBlur={event => onBlur(index, null, event.target.value, 'reason')} />\n    </>\n  )\n}\n\nexport default BingoCard;","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        style={{ paddingRight: 10, fontSize: '1.2em' }}\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst Footer = () => (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Source code available on '}\n        <Link href=\"https://github.com/IoanaStumb/people-bingo\">\n            Github.\n        </Link>\n    </Typography>\n);\n\nexport default Footer;","import { shuffleArray, getRandomCardBackgroundColor, getBingoColor } from './helpers';\n\nconst getQuestionsOrder = (questions) => {\n    let shuffledQuestions = questions.slice(0);\n    shuffleArray(shuffledQuestions);\n\n    return shuffledQuestions.map(shuffledQuestion => {\n        return {\n            questionType: shuffledQuestion.questionType,\n            questionText: shuffledQuestion.questionText,\n            answer: null,\n            reason: null,\n            isAnswered: shuffledQuestion.questionType === 'free' ? true : false,\n            color: shuffledQuestion.questionType === 'free' ? getBingoColor() : getRandomCardBackgroundColor()\n        }\n    });\n};\n\nconst checkForBingo = (questions, index, winType, gridSize) => {\n    let row = Math.floor(index / gridSize);\n    let column = index % gridSize;\n\n    let isBingo = true;\n    for (let i = 0; i < gridSize && isBingo; i++) {\n        let position = winType === 'row'\n            ? gridSize * row + i\n            : gridSize * i + column;\n\n        isBingo = questions[position].isAnswered;\n    }\n\n    return isBingo;\n}\n\nconst isBingoQuestionAnswered = (question) => {\n    if (question.questionType === 'default' && question.answer) {\n        return true;\n    }\n    if (question.questionType === 'open-ended-question'\n        && question.answer && question.reason) {\n        return true;\n    }\n    return false;\n}\n\nexport { getQuestionsOrder, checkForBingo, isBingoQuestionAnswered };","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport BingoCard from './BingoCard';\nimport Emoji from './Emoji';\nimport Footer from './Footer';\nimport { checkForBingo, getQuestionsOrder, isBingoQuestionAnswered } from '../logic/bingo-logic';\nimport { getBingoColor } from '../logic/helpers';\nimport './BingoGame.css';\n\n// styling\nconst useStyles = makeStyles((theme) => ({\n  generalLayout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    },\n  },\n  introLayout: {\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 1200,\n    }\n  },\n  gameLayout: {\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: props => (1200 * props.gridSize) / 5,\n    }\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  sidekickContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(0, 0, 4),\n  },\n  bingoContent: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    left: theme.spacing(1),\n    margin: theme.spacing(2, 0, 2),\n    fontSize: '2.5em'\n  },\n  doubleBingoContent: {\n    position: \"fixed\",\n    bottom: theme.spacing(8),\n    left: theme.spacing(1),\n    margin: theme.spacing(2, 0, 2),\n    fontSize: '1.6em'\n  },\n  resetButton: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(1),\n    margin: theme.spacing(2, 0, 2)\n  },\n  bold: {\n    fontWeight: 'bold'\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  card: {\n    height: 160\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: props => -props.spaceBetweenItems * 0.5\n  },\n  item: {\n    display: 'block',\n    flex: 'none',\n    width: props => 100 / props.gridSize + '%',\n    boxSizing: 'border-box',\n    padding: props => props.spaceBetweenItems * 0.5\n  },\n  footer: {\n    margin: theme.spacing(0, 0, 3)\n  }\n}));\n\nfunction BingoGame({ data, gridSize }) {\n  const classes = useStyles({ gridSize: gridSize, spaceBetweenItems: 20 });\n  const [questions, setQuestions] = useState([]);\n  const [bingoCounter, setBingoCounter] = useState(0);\n  const [isDoubleBingo, setIsDoubleBingo] = useState(false);\n\n  useEffect(() => {\n    let shuffledQuestions = JSON.parse(localStorage.getItem('shuffledQuestions')) || getQuestionsOrder(data);\n    setQuestions(shuffledQuestions);\n  }, [data]);\n\n  React.useEffect(() => {\n    localStorage.setItem('shuffledQuestions', JSON.stringify(questions))\n  }, [questions]);\n\n  const handleOnBlur = (index, answer, reason, type) => {\n    const updatedQuestions = questions.slice(0);\n    if (type === 'answer') {\n      updatedQuestions[index].answer = answer;\n    }\n    if (type === 'reason') {\n      updatedQuestions[index].reason = reason;\n    }\n    updatedQuestions[index].isAnswered = isBingoQuestionAnswered(updatedQuestions[index]);\n    setQuestions(updatedQuestions);\n\n    let isRowBingo = checkForBingo(updatedQuestions, index, 'row', gridSize);\n    let isColumnBingo = checkForBingo(updatedQuestions, index, 'column', gridSize);\n\n    if (isRowBingo && isColumnBingo) {\n      setBingoCounter(bingoCounter + 2);\n      setIsDoubleBingo(true);\n    }\n    else if (isRowBingo || isColumnBingo) {\n      setBingoCounter(bingoCounter + 1);\n    }\n  }\n\n  const handleReset = () => {\n    let shuffledQuestions = getQuestionsOrder(data);\n    setQuestions(shuffledQuestions);\n    setBingoCounter(0);\n    setIsDoubleBingo(false);\n  }\n\n  return (\n    <>\n      <CssBaseline />\n\n      <div className={`${classes.generalLayout} ${classes.introLayout}`}>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              People Bingo!\n            </Typography>\n          </Container>\n        </div>\n        \n        <div className={classes.sidekickContent}>\n          <Container maxWidth=\"md\">\n            <List>\n              <ListItem>\n                <ListItemText disableTypography primary={<Typography style={{ fontWeight: 'bold' }}>Rules:</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"📋\" label=\"clipboard\" />\n                <ListItemText primary=\"Everyone receives the same questions in a random order.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🤔\" label=\"thinking-face\" />\n                <ListItemText primary=\"One by one, each participant asks the others a question from the game.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🎉\" label=\"party-popper\" />\n                <ListItemText disableTypography\n                  primary={<Typography>If the person being asked answers, <span style={{ fontWeight: 'bold' }}>everyone</span> in the group writes down their name in the bingo card.</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"💯\" label=\"hundred-points\" />\n                <ListItemText primary=\"The team decides when the game ends. It can be when somebody fills in either a row or a column, both, multiple - go wild!\" />\n              </ListItem>\n            </List>\n          </Container>\n        </div>\n      </div>\n      \n      <main className={`${classes.generalLayout} ${classes.gameLayout}`}>\n        <div className={classes.bingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              bingoCounter > 0 &&\n              <>\n                <span>Bingo! x</span><span>{bingoCounter}</span>\n              </>\n            }\n          </Container>\n        </div>\n\n        <div className={classes.doubleBingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              isDoubleBingo && <span>Whoa! Double bingo!</span>\n            }\n          </Container>\n        </div>\n\n        <Paper elevation={3} className={classes.paper}>\n          <div className={classes.container}>\n            {\n              questions.map((question, index) => {\n                let color = question.isAnswered ? getBingoColor() : question.color;\n                return (\n                  <div key={index} className={classes.item}>\n                    <Card className={classes.card} style={{ backgroundColor: color }}>\n                      <CardContent>\n                        <BingoCard\n                          index={index}\n                          question={question}\n                          onBlur={handleOnBlur}\n                        />\n                      </CardContent>\n                    </Card>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </Paper>\n\n        <div className={classes.footer}>\n          <Footer />\n        </div>\n\n        <div className={classes.resetButton}>\n          <Container maxWidth=\"sm\">\n            <Button variant=\"contained\" onClick={event => handleReset()}> Resetti (the spaghetti)</Button>\n          </Container>\n        </div>\n      </main >\n    </>\n  );\n}\n\nexport default BingoGame;","import './App.css';\nimport { Helmet } from 'react-helmet';\nimport BingoGame from './BingoGame';\nimport data from '../data.json';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Bingo bango bongo</title>\n      </Helmet>\n\n      <BingoGame\n        data={data}\n        gridSize={5}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}