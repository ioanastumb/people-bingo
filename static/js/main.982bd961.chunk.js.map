{"version":3,"sources":["components/BingoCard/styling.js","components/BingoCard/BingoDefaultCard.js","components/BingoCard/BingoFreeCard.js","logic/helpers.js","components/BingoCard/BingoComplexCard.js","components/BingoCard/BingoCard.js","components/Emoji.js","components/Footer.js","components/BingoGame/styling.js","components/BingoGame/BingoGame.js","logic/bingo-logic.js","logic/question.js","components/GameWrapper/GameWrapper.js","logic/game.js","components/App/App.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontSize","bingoInput","width","freeContent","paddingTop","BingoDefaultCard","index","question","onChange","onBlur","classes","id","Typography","className","color","gutterBottom","questionText","TextField","value","answer","autoComplete","event","target","BingoFreeCard","getRandomCardBackgroundColor","colors","Math","floor","random","length","isEmpty","BingoComplexCard","string","answerId","reasonId","size","placeholder","style","charAt","toLowerCase","slice","reason","BingoCard","questionType","Emoji","props","paddingRight","role","label","symbol","Footer","variant","align","Link","href","settings","version","generalLayout","marginLeft","spacing","marginRight","breakpoints","up","introLayout","gameLayout","gridSize","heroContent","backgroundColor","palette","background","paper","padding","sidekickContent","bingoContent","position","bottom","left","margin","doubleBingoContent","resetButton","right","bold","fontWeight","marginTop","marginBottom","card","height","container","display","flexWrap","spaceBetweenItems","item","flex","boxSizing","footer","BingoGame","gameId","questions","handleReset","bingoCounter","isDoubleBingo","CssBaseline","Container","maxWidth","component","List","ListItem","ListItemText","disableTypography","primary","Paper","elevation","map","isAnswered","Card","CardContent","Button","onClick","getQuestionsOrder","shuffledQuestions","array","i","j","shuffleArray","shuffledQuestion","checkForBingo","winType","row","column","isBingo","GameWrapper","games","useState","isValid","gameDefinition","find","game","matchedQuestions","questionIds","questionId","createGame","gameSessions","setGameSessions","setBingoCounter","setIsDoubleBingo","useEffect","storageSessions","JSON","parse","localStorage","getItem","setItem","stringify","type","currentGameSessions","isRowBingo","isColumnBingo","App","Helmet","path","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.982bd961.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '1em',\r\n    },\r\n    bingoInput: {\r\n        width: '50%'\r\n    },\r\n    freeContent: {\r\n        fontSize: '2.5em',\r\n        paddingTop: 40\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\n\r\nconst BingoDefaultCard = ({ index, question, onChange, onBlur }) => {\r\n    const classes = useStyles();\r\n    const id = \"answer-\" + index;\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                Find someone who...\r\n            </Typography>\r\n            <br />\r\n\r\n            <span>{question.questionText}</span>\r\n            <br />\r\n\r\n            <TextField id={id} value={question.answer} autoComplete=\"off\"\r\n                onChange={event => onChange(index, event.target.value, '', 'answer')}\r\n                onBlur={event => onBlur(index, event.target.value, '', 'answer')} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BingoDefaultCard;","import Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\n\r\nconst BingoFreeCard = ({ question }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Typography className={classes.freeContent} gutterBottom>\r\n            {question.questionText}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default BingoFreeCard;","const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nconst toLowercaseFirstLetter = string => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\nconst getRandomCardBackgroundColor = () => {\n    let colors = [\"#ffe289\", \"#ffd9bd\", \"#b197aa\", \"#8399c5\", \"#faba95\", \"#f9ebac\"];\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst getBingoColor = () => {\n    return \"#81c784\";\n}\n\nconst isEmpty = (value) => {\n    return !(typeof value !== 'undefined' && value);\n}\n\nexport { shuffleArray, toLowercaseFirstLetter, getRandomCardBackgroundColor, getBingoColor, isEmpty };","import TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\nimport { toLowercaseFirstLetter } from '../../logic/helpers';\r\n\r\nconst BingoComplexCard = ({ index, question, onChange, onBlur }) => {\r\n    const classes = useStyles();\r\n    const answerId = \"answer-\" + index;\r\n    const reasonId = \"reason-\" + index;\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                Question time!\r\n            </Typography>\r\n\r\n            <TextField id={answerId} size=\"small\" className={classes.bingoInput} autoComplete=\"off\"\r\n                placeholder=\"who?\" value={question.answer}\r\n                onChange={event => onChange(index, event.target.value, '', 'answer')}\r\n                onBlur={event => onBlur(index, event.target.value, '', 'answer')} />\r\n            <span style={{ fontSize: 24 }}>,</span>\r\n            <br />\r\n\r\n            <span>{toLowercaseFirstLetter(question.questionText)}</span>\r\n            <br />\r\n\r\n            <TextField id={reasonId} value={question.reason} autoComplete=\"off\"\r\n                onChange={event => onChange(index, '', event.target.value, 'reason')}\r\n                onBlur={event => onBlur(index, '', event.target.value, 'reason')} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BingoComplexCard;","import React from 'react';\nimport BingoDefaultCard from './BingoDefaultCard';\nimport BingoFreeCard from './BingoFreeCard';\nimport BingoComplexCard from './BingoComplexCard';\nimport './BingoCard.css';\n\nconst BingoCard = ({ index, question, onChange, onBlur }) => {\n  return (\n    <div className=\"bingo-card\">\n      {\n        question.questionType === 'default' &&\n        <BingoDefaultCard\n          index={index}\n          question={question}\n          onChange={onChange}\n          onBlur={onBlur} />\n      }\n      {\n        question.questionType === 'free' &&\n        <BingoFreeCard\n          question={question}\n        />\n      }\n      {\n        question.questionType === 'open-ended-question' &&\n        <BingoComplexCard\n          index={index}\n          question={question}\n          onChange={onChange}\n          onBlur={onBlur} />\n      }\n    </div>\n  );\n}\n\nexport default BingoCard;","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        style={{ paddingRight: 10, fontSize: '1.2em' }}\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport settings from '../settings.json';\n\nconst Footer = () => (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Source code available on '}\n        <Link href=\"https://github.com/IoanaStumb/people-bingo\">\n            Github.\n        </Link>\n        <br/>\n        {'Version'} {settings.version}\n    </Typography>\n);\n\nexport default Footer;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    generalLayout: {\r\n      width: 'auto',\r\n      marginLeft: theme.spacing(2),\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n      },\r\n    },\r\n    introLayout: {\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: 1200,\r\n      }\r\n    },\r\n    gameLayout: {\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: props => (1200 * props.gridSize) / 5,\r\n      }\r\n    },\r\n    heroContent: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(8, 0, 6),\r\n    },\r\n    sidekickContent: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(0, 0, 4),\r\n    },\r\n    bingoContent: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      left: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2),\r\n      fontSize: '2.5em'\r\n    },\r\n    doubleBingoContent: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(8),\r\n      left: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2),\r\n      fontSize: '1.6em'\r\n    },\r\n    resetButton: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2)\r\n    },\r\n    bold: {\r\n      fontWeight: 'bold'\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n      padding: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n        marginTop: theme.spacing(6),\r\n        marginBottom: theme.spacing(6),\r\n        padding: theme.spacing(3)\r\n      }\r\n    },\r\n    card: {\r\n      height: 160\r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      margin: props => -props.spaceBetweenItems * 0.5\r\n    },\r\n    item: {\r\n      display: 'block',\r\n      flex: 'none',\r\n      width: props => 100 / props.gridSize + '%',\r\n      boxSizing: 'border-box',\r\n      padding: props => props.spaceBetweenItems * 0.5\r\n    },\r\n    footer: {\r\n      margin: theme.spacing(0, 0, 3)\r\n    }\r\n  }));\r\n\r\nexport default useStyles;","import CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport BingoCard from '../BingoCard/BingoCard';\nimport Emoji from '../Emoji';\nimport Footer from '../Footer';\nimport useStyles from './styling';\nimport { getBingoColor } from '../../logic/helpers';\nimport './BingoGame.css';\n\nconst BingoGame = ({ gameId, gridSize, questions, onChange, onBlur, handleReset, bingoCounter, isDoubleBingo }) => {\n  const classes = useStyles({ gridSize: gridSize, spaceBetweenItems: 20 });\n\n  return (\n    <>\n      <CssBaseline />\n\n      <div className={`${classes.generalLayout} ${classes.introLayout}`}>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              People Bingo!\n            </Typography>\n          </Container>\n        </div>\n        \n        <div className={classes.sidekickContent}>\n          <Container maxWidth=\"md\">\n            <List>\n              <ListItem>\n                <ListItemText disableTypography primary={<Typography style={{ fontWeight: 'bold' }}>Rules:</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"📋\" label=\"clipboard\" />\n                <ListItemText primary=\"Everyone receives the same questions in a random order.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🤔\" label=\"thinking-face\" />\n                <ListItemText primary=\"One by one, each participant asks the others a question from the game.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🎉\" label=\"party-popper\" />\n                <ListItemText disableTypography\n                  primary={<Typography>If the person being asked answers, <span style={{ fontWeight: 'bold' }}>everyone</span> in the group writes down their name in the bingo card.</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"💯\" label=\"hundred-points\" />\n                <ListItemText primary=\"The team decides when the game ends. It can be when somebody fills in either a row or a column, both, multiple - go wild!\" />\n              </ListItem>\n            </List>\n          </Container>\n        </div>\n      </div>\n      \n      <main className={`${classes.generalLayout} ${classes.gameLayout}`}>\n        <div className={classes.bingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              bingoCounter > 0 &&\n              <>\n                <span>Bingo! x</span><span>{bingoCounter}</span>\n              </>\n            }\n          </Container>\n        </div>\n\n        <div className={classes.doubleBingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              isDoubleBingo && <span>Whoa! Double bingo!</span>\n            }\n          </Container>\n        </div>\n\n        <Paper elevation={3} className={classes.paper}>\n          <div className={classes.container}>\n            {\n              questions.map((question, index) => {\n                let color = question.isAnswered ? getBingoColor() : question.color;\n                return (\n                  <div key={index} className={classes.item}>\n                    <Card className={classes.card} style={{ backgroundColor: color }}>\n                      <CardContent>\n                        <BingoCard\n                          index={index}\n                          question={question}\n                          onChange={onChange}\n                          onBlur={onBlur}\n                        />\n                      </CardContent>\n                    </Card>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </Paper>\n\n        <div className={classes.footer}>\n          <Footer />\n        </div>\n\n        <div className={classes.resetButton}>\n          <Container maxWidth=\"sm\">\n            <Button variant=\"contained\" onClick={event => handleReset()}>Reset</Button>\n          </Container>\n        </div>\n      </main >\n    </>\n  );\n}\n\nexport default BingoGame;","import { shuffleArray, getRandomCardBackgroundColor, getBingoColor } from './helpers';\nimport { createQuestion } from './question.js';\n\nconst getQuestionsOrder = (questions) => {\n    let shuffledQuestions = questions.slice(0);\n    shuffleArray(shuffledQuestions);\n\n    return shuffledQuestions.map(shuffledQuestion => {\n        return {\n            ...createQuestion(shuffledQuestion.questionType, shuffledQuestion.questionText),\n            isAnswered: shuffledQuestion.questionType === 'free' ? true : false,\n            color: shuffledQuestion.questionType === 'free' ? getBingoColor() : getRandomCardBackgroundColor()\n        }\n    });\n};\n\nconst checkForBingo = (questions, index, winType, gridSize) => {\n    let row = Math.floor(index / gridSize);\n    let column = index % gridSize;\n\n    let isBingo = true;\n    for (let i = 0; i < gridSize && isBingo; i++) {\n        let position = winType === 'row'\n            ? gridSize * row + i\n            : gridSize * i + column;\n\n        isBingo = questions[position].isAnswered;\n    }\n\n    return isBingo;\n}\n\nconst isBingoQuestionAnswered = (question) => {\n    if (question.questionType === 'default' && question.answer) {\n        return true;\n    }\n    if (question.questionType === 'open-ended-question'\n        && question.answer && question.reason) {\n        return true;\n    }\n    return false;\n}\n\nexport { getQuestionsOrder, checkForBingo, isBingoQuestionAnswered };","const createQuestion = (questionType, questionText) => {\r\n    return {\r\n        questionType: questionType,\r\n        questionText: questionText,\r\n        answer: '',\r\n        reason: '',\r\n        isAnswered: false,\r\n        color: \"#fff\"\r\n    }\r\n}\r\n\r\nexport { createQuestion };","import { useState, useEffect } from 'react';\nimport './GameWrapper.css';\nimport BingoGame from '../BingoGame/BingoGame';\nimport { createGame } from '../../logic/game';\nimport { checkForBingo, getQuestionsOrder, isBingoQuestionAnswered } from '../../logic/bingo-logic';\nimport { isEmpty } from '../../logic/helpers';\n\nconst GameWrapper = ({ gameId, games, questions}) => {\n  const [game] = useState(createGame(gameId, games, questions));\n  const [gameSessions, setGameSessions] = useState({});\n  const [bingoCounter, setBingoCounter] = useState(0);\n  const [isDoubleBingo, setIsDoubleBingo] = useState(false); \n\n  useEffect(() => {\n    if (game.isValid) {\n      let storageSessions = JSON.parse(localStorage.getItem('gameSessions')) || {}; \n\n      if (isEmpty(storageSessions[game.gameId])) {\n        let shuffledQuestions = getQuestionsOrder(game.questions);\n        storageSessions[game.gameId] = shuffledQuestions;\n      }\n  \n      setGameSessions(storageSessions);\n    }\n  }, [game.gameId, game.questions]);\n\n  useEffect(() => {\n    localStorage.setItem('gameSessions', JSON.stringify(gameSessions))\n  }, [gameSessions]);\n\n  const handleOnChange = (index, answer, reason, type) => {\n    let currentGameSessions = {...gameSessions};\n    if (type === 'answer') {\n      currentGameSessions[game.gameId][index].answer = answer;\n    }\n    if (type === 'reason') {\n      currentGameSessions[game.gameId][index].reason = reason;\n    }\n    setGameSessions(currentGameSessions);\n  }\n\n  const handleOnBlur = (index, answer, reason, type) => {\n    let currentGameSessions = {...gameSessions};\n    if (type === 'answer') {\n      currentGameSessions[game.gameId][index].answer = answer;\n    }\n    if (type === 'reason') {\n      currentGameSessions[game.gameId][index].reason = reason;\n    }\n    currentGameSessions[game.gameId][index].isAnswered = isBingoQuestionAnswered(currentGameSessions[game.gameId][index]);\n    setGameSessions(currentGameSessions);\n\n    let isRowBingo = checkForBingo(currentGameSessions[game.gameId], index, 'row', game.gridSize);\n    let isColumnBingo = checkForBingo(currentGameSessions[game.gameId], index, 'column', game.gridSize);\n\n    if (isRowBingo && isColumnBingo) {\n      setBingoCounter(bingoCounter + 2);\n      setIsDoubleBingo(true);\n    }\n    else if (isRowBingo || isColumnBingo) {\n      setBingoCounter(bingoCounter + 1);\n    }\n  }\n\n  const handleReset = () => {\n    let currentGameSessions = {...gameSessions};\n    let shuffledQuestions = getQuestionsOrder(currentGameSessions[game.gameId]);\n    currentGameSessions[game.gameId] = shuffledQuestions;\n    setGameSessions(currentGameSessions);\n    setBingoCounter(0);\n    setIsDoubleBingo(false);\n  }\n\n  return (\n    <>\n      {\n        game.isValid &&\n        gameSessions[game.gameId] &&\n        <BingoGame\n          gameId={game.gameId}\n          gridSize={game.gridSize}\n          questions={gameSessions[game.gameId]}\n          onChange={handleOnChange}\n          onBlur={handleOnBlur}\n          handleReset={handleReset}\n          bingoCounter={bingoCounter}\n          isDoubleBingo={isDoubleBingo}\n        />\n      }\n\n      {\n        !game.isValid &&\n        <p>\n          Oops!\n          <br /><br />\n          We couldn't find any game session with the given URL.\n          <br /><br />\n          Maybe you mistyped a letter (happens to all of us, right?)\n        </p>\n      }\n    </>\n  );\n}\n\nexport default GameWrapper;","import { isEmpty } from \"./helpers\";\r\n\r\nconst createGame = (gameId, games, questions) => {\r\n\r\n    if (isEmpty(gameId) || isEmpty(games) || isEmpty(questions)) {\r\n        return {\r\n            isValid: false\r\n        }\r\n    }\r\n\r\n    let gameDefinition = games.find(game => game.gameId === gameId);\r\n\r\n    if (isEmpty(gameDefinition)) {\r\n        return {\r\n            isValid: false\r\n        }\r\n    }\r\n\r\n    let matchedQuestions = gameDefinition.questionIds.map(questionId => {\r\n        return questions.find(questions => questions.questionId === questionId);\r\n    });\r\n\r\n    if (isEmpty(matchedQuestions) || matchedQuestions === []) {\r\n        return {\r\n            isValid: false\r\n        }\r\n    }\r\n\r\n    return {\r\n        isValid: true,\r\n        gameId: gameId,\r\n        gridSize: gameDefinition.gridSize,\r\n        questions: matchedQuestions\r\n    }\r\n}\r\n\r\nexport { createGame };","import './App.css';\nimport { Helmet } from 'react-helmet';\nimport { Router } from \"@reach/router\"\nimport GameWrapper from '../GameWrapper/GameWrapper';\nimport questions from '../../questions.json';\nimport games from '../../games.json';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Bingo bango bongo</title>\n      </Helmet>\n\n      <Router>\n        <GameWrapper\n          path=\"/people-bingo/games/:gameId\" \n          games={games}\n          questions={questions} />\n        <GameWrapper \n          default\n          gameId={\"g1\"}\n          games={games}\n          questions={questions} />\n      </Router>\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}