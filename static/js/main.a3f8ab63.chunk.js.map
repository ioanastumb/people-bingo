{"version":3,"sources":["components/BingoCard/styling.js","components/BingoCard/BingoDefaultCard.js","components/BingoCard/BingoFreeCard.js","logic/helpers.js","components/BingoCard/BingoComplexCard.js","components/BingoCard/BingoCard.js","components/Emoji.js","components/Footer.js","components/BingoGame/styling.js","logic/bingo-logic.js","components/BingoGame/BingoGame.js","components/App/App.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontSize","bingoInput","width","freeContent","paddingTop","BingoDefaultCard","index","incomingQuestion","onBlur","classes","id","Typography","className","color","gutterBottom","questionText","TextField","defaultValue","answer","event","target","value","BingoFreeCard","getRandomCardBackgroundColor","colors","Math","floor","random","length","BingoComplexCard","string","answerId","reasonId","size","placeholder","style","charAt","toLowerCase","slice","reason","BingoCard","questionType","Emoji","props","paddingRight","role","aria-label","label","aria-hidden","symbol","Footer","variant","align","Link","href","generalLayout","marginLeft","spacing","marginRight","breakpoints","up","introLayout","gameLayout","gridSize","heroContent","backgroundColor","palette","background","paper","padding","sidekickContent","bingoContent","position","bottom","left","margin","doubleBingoContent","resetButton","right","bold","fontWeight","marginTop","marginBottom","card","height","container","display","flexWrap","spaceBetweenItems","item","flex","boxSizing","footer","getQuestionsOrder","questions","shuffledQuestions","array","i","j","shuffleArray","map","shuffledQuestion","isAnswered","checkForBingo","winType","row","column","isBingo","BingoGame","data","useState","setQuestions","bingoCounter","setBingoCounter","isDoubleBingo","setIsDoubleBingo","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","handleOnBlur","type","question","updatedQuestions","isRowBingo","isColumnBingo","CssBaseline","Container","maxWidth","component","List","ListItem","ListItemText","disableTypography","primary","Paper","elevation","Card","CardContent","Button","onClick","handleReset","App","Helmet","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3f8ab63.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '1em',\r\n    },\r\n    bingoInput: {\r\n        width: '50%'\r\n    },\r\n    freeContent: {\r\n        fontSize: '2.5em',\r\n        paddingTop: 40\r\n    }\r\n}));\r\n\r\nexport default useStyles;","import TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\n\r\nconst BingoDefaultCard = ({ index, incomingQuestion, onBlur }) => {\r\n    const classes = useStyles();\r\n    const id = \"answer-\" + index;\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                Find someone who...\r\n            </Typography>\r\n            <br />\r\n\r\n            <span>{incomingQuestion.questionText}</span>\r\n            <br />\r\n\r\n            <TextField id={id} defaultValue={incomingQuestion.answer} onBlur={event => onBlur(index, event.target.value, null, 'answer')} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BingoDefaultCard;","import Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\n\r\nconst BingoFreeCard = ({ incomingQuestion }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Typography className={classes.freeContent} gutterBottom>\r\n            {incomingQuestion.questionText}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default BingoFreeCard;","const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nconst toLowercaseFirstLetter = string => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\nconst getRandomCardBackgroundColor = () => {\n    let colors = [\"#ffe289\", \"#ffd9bd\", \"#b197aa\", \"#8399c5\", \"#faba95\", \"#f9ebac\"];\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst getBingoColor = () => {\n    return \"#81c784\";\n}\n\nexport { shuffleArray, toLowercaseFirstLetter, getRandomCardBackgroundColor, getBingoColor };","import TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useStyles from './styling';\r\nimport { toLowercaseFirstLetter } from '../../logic/helpers';\r\n\r\nconst BingoComplexCard = ({ index, incomingQuestion, onBlur }) => {\r\n    const classes = useStyles();\r\n    const answerId = \"answer-\" + index;\r\n    const reasonId = \"reason-\" + index;\r\n\r\n    return (\r\n        <>\r\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                Question time!\r\n            </Typography>\r\n\r\n            <TextField id={answerId} size=\"small\" className={classes.bingoInput}\r\n                placeholder=\"who?\" defaultValue={incomingQuestion.answer} onBlur={event => onBlur(index, event.target.value, null, 'answer')} />\r\n            <span style={{ fontSize: 24 }}>,</span>\r\n            <br />\r\n\r\n            <span>{toLowercaseFirstLetter(incomingQuestion.questionText)}</span>\r\n            <br />\r\n\r\n            <TextField id={reasonId} defaultValue={incomingQuestion.reason} onBlur={event => onBlur(index, null, event.target.value, 'reason')} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BingoComplexCard;","import React from 'react';\nimport BingoDefaultCard from './BingoDefaultCard';\nimport BingoFreeCard from './BingoFreeCard';\nimport BingoComplexCard from './BingoComplexCard';\nimport './BingoCard.css';\n\nconst BingoCard = ({ index, incomingQuestion, onBlur }) => {\n  return (\n    <div className=\"bingo-card\">\n      {\n        incomingQuestion.questionType === 'default' &&\n        <BingoDefaultCard\n          index={index}\n          incomingQuestion={incomingQuestion}\n          onBlur={onBlur} />\n      }\n      {\n        incomingQuestion.questionType === 'free' &&\n        <BingoFreeCard\n        incomingQuestion={incomingQuestion}\n        />\n      }\n      {\n        incomingQuestion.questionType === 'open-ended-question' &&\n        <BingoComplexCard\n          index={index}\n          incomingQuestion={incomingQuestion}\n          onBlur={onBlur} />\n      }\n    </div>\n  );\n}\n\nexport default BingoCard;","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        style={{ paddingRight: 10, fontSize: '1.2em' }}\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst Footer = () => (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Source code available on '}\n        <Link href=\"https://github.com/IoanaStumb/people-bingo\">\n            Github.\n        </Link>\n    </Typography>\n);\n\nexport default Footer;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    generalLayout: {\r\n      width: 'auto',\r\n      marginLeft: theme.spacing(2),\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto'\r\n      },\r\n    },\r\n    introLayout: {\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: 1200,\r\n      }\r\n    },\r\n    gameLayout: {\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: props => (1200 * props.gridSize) / 5,\r\n      }\r\n    },\r\n    heroContent: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(8, 0, 6),\r\n    },\r\n    sidekickContent: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(0, 0, 4),\r\n    },\r\n    bingoContent: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      left: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2),\r\n      fontSize: '2.5em'\r\n    },\r\n    doubleBingoContent: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(8),\r\n      left: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2),\r\n      fontSize: '1.6em'\r\n    },\r\n    resetButton: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(1),\r\n      margin: theme.spacing(2, 0, 2)\r\n    },\r\n    bold: {\r\n      fontWeight: 'bold'\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n      padding: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n        marginTop: theme.spacing(6),\r\n        marginBottom: theme.spacing(6),\r\n        padding: theme.spacing(3)\r\n      }\r\n    },\r\n    card: {\r\n      height: 160\r\n    },\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      margin: props => -props.spaceBetweenItems * 0.5\r\n    },\r\n    item: {\r\n      display: 'block',\r\n      flex: 'none',\r\n      width: props => 100 / props.gridSize + '%',\r\n      boxSizing: 'border-box',\r\n      padding: props => props.spaceBetweenItems * 0.5\r\n    },\r\n    footer: {\r\n      margin: theme.spacing(0, 0, 3)\r\n    }\r\n  }));\r\n\r\nexport default useStyles;","import { shuffleArray, getRandomCardBackgroundColor, getBingoColor } from './helpers';\n\nconst getQuestionsOrder = (questions) => {\n    let shuffledQuestions = questions.slice(0);\n    shuffleArray(shuffledQuestions);\n\n    return shuffledQuestions.map(shuffledQuestion => {\n        return {\n            questionType: shuffledQuestion.questionType,\n            questionText: shuffledQuestion.questionText,\n            answer: null,\n            reason: null,\n            isAnswered: shuffledQuestion.questionType === 'free' ? true : false,\n            color: shuffledQuestion.questionType === 'free' ? getBingoColor() : getRandomCardBackgroundColor()\n        }\n    });\n};\n\nconst checkForBingo = (questions, index, winType, gridSize) => {\n    let row = Math.floor(index / gridSize);\n    let column = index % gridSize;\n\n    let isBingo = true;\n    for (let i = 0; i < gridSize && isBingo; i++) {\n        let position = winType === 'row'\n            ? gridSize * row + i\n            : gridSize * i + column;\n\n        isBingo = questions[position].isAnswered;\n    }\n\n    return isBingo;\n}\n\nconst isBingoQuestionAnswered = (question) => {\n    if (question.questionType === 'default' && question.answer) {\n        return true;\n    }\n    if (question.questionType === 'open-ended-question'\n        && question.answer && question.reason) {\n        return true;\n    }\n    return false;\n}\n\nexport { getQuestionsOrder, checkForBingo, isBingoQuestionAnswered };","import React, { useState, useEffect } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport BingoCard from '../BingoCard/BingoCard';\nimport Emoji from '../Emoji';\nimport Footer from '../Footer';\nimport useStyles from './styling';\nimport { checkForBingo, getQuestionsOrder, isBingoQuestionAnswered } from '../../logic/bingo-logic';\nimport { getBingoColor } from '../../logic/helpers';\nimport './BingoGame.css';\n\nconst BingoGame = ({ data, gridSize }) => {\n  const classes = useStyles({ gridSize: gridSize, spaceBetweenItems: 20 });\n  const [questions, setQuestions] = useState([]);\n  const [bingoCounter, setBingoCounter] = useState(0);\n  const [isDoubleBingo, setIsDoubleBingo] = useState(false);\n\n  useEffect(() => {\n    let shuffledQuestions = JSON.parse(localStorage.getItem('shuffledQuestions')) || getQuestionsOrder(data);\n    setQuestions(shuffledQuestions);\n  }, [data]);\n\n  useEffect(() => {\n    localStorage.setItem('shuffledQuestions', JSON.stringify(questions))\n  }, [questions]);\n\n  const handleOnBlur = (index, answer, reason, type) => {\n    const updatedQuestions = questions.slice(0);\n    if (type === 'answer') {\n      updatedQuestions[index].answer = answer;\n    }\n    if (type === 'reason') {\n      updatedQuestions[index].reason = reason;\n    }\n    updatedQuestions[index].isAnswered = isBingoQuestionAnswered(updatedQuestions[index]);\n    setQuestions(updatedQuestions);\n\n    let isRowBingo = checkForBingo(updatedQuestions, index, 'row', gridSize);\n    let isColumnBingo = checkForBingo(updatedQuestions, index, 'column', gridSize);\n\n    if (isRowBingo && isColumnBingo) {\n      setBingoCounter(bingoCounter + 2);\n      setIsDoubleBingo(true);\n    }\n    else if (isRowBingo || isColumnBingo) {\n      setBingoCounter(bingoCounter + 1);\n    }\n  }\n\n  const handleReset = () => {\n    let shuffledQuestions = getQuestionsOrder(data);\n    setQuestions(shuffledQuestions);\n    setBingoCounter(0);\n    setIsDoubleBingo(false);\n  }\n\n  return (\n    <>\n      <CssBaseline />\n\n      <div className={`${classes.generalLayout} ${classes.introLayout}`}>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              People Bingo!\n            </Typography>\n          </Container>\n        </div>\n        \n        <div className={classes.sidekickContent}>\n          <Container maxWidth=\"md\">\n            <List>\n              <ListItem>\n                <ListItemText disableTypography primary={<Typography style={{ fontWeight: 'bold' }}>Rules:</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"📋\" label=\"clipboard\" />\n                <ListItemText primary=\"Everyone receives the same questions in a random order.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🤔\" label=\"thinking-face\" />\n                <ListItemText primary=\"One by one, each participant asks the others a question from the game.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🎉\" label=\"party-popper\" />\n                <ListItemText disableTypography\n                  primary={<Typography>If the person being asked answers, <span style={{ fontWeight: 'bold' }}>everyone</span> in the group writes down their name in the bingo card.</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"💯\" label=\"hundred-points\" />\n                <ListItemText primary=\"The team decides when the game ends. It can be when somebody fills in either a row or a column, both, multiple - go wild!\" />\n              </ListItem>\n            </List>\n          </Container>\n        </div>\n      </div>\n      \n      <main className={`${classes.generalLayout} ${classes.gameLayout}`}>\n        <div className={classes.bingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              bingoCounter > 0 &&\n              <>\n                <span>Bingo! x</span><span>{bingoCounter}</span>\n              </>\n            }\n          </Container>\n        </div>\n\n        <div className={classes.doubleBingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              isDoubleBingo && <span>Whoa! Double bingo!</span>\n            }\n          </Container>\n        </div>\n\n        <Paper elevation={3} className={classes.paper}>\n          <div className={classes.container}>\n            {\n              questions.map((question, index) => {\n                let color = question.isAnswered ? getBingoColor() : question.color;\n                return (\n                  <div key={index} className={classes.item}>\n                    <Card className={classes.card} style={{ backgroundColor: color }}>\n                      <CardContent>\n                        <BingoCard\n                          index={index}\n                          incomingQuestion={question}\n                          onBlur={handleOnBlur}\n                        />\n                      </CardContent>\n                    </Card>\n                  </div>\n                );\n              })\n            }\n          </div>\n        </Paper>\n\n        <div className={classes.footer}>\n          <Footer />\n        </div>\n\n        <div className={classes.resetButton}>\n          <Container maxWidth=\"sm\">\n            <Button variant=\"contained\" onClick={event => handleReset()}> Resetti (the spaghetti)</Button>\n          </Container>\n        </div>\n      </main >\n    </>\n  );\n}\n\nexport default BingoGame;","import './App.css';\nimport { Helmet } from 'react-helmet';\nimport BingoGame from '../BingoGame/BingoGame';\nimport data from '../../data.json';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Bingo bango bongo</title>\n      </Helmet>\n\n      <BingoGame\n        data={data}\n        gridSize={5}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}